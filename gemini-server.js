const express = require('express');
const cors = require('cors');
const { GoogleGenerativeAI } = require('@google/generative-ai');

const app = express();
const PORT = process.env.GEMINI_PORT || 3002;
const isDevelopment = process.env.NODE_ENV !== 'production';

// Gemini APIË®≠ÂÆö
const API_KEY = process.env.NEXT_PUBLIC_GEMINI_API_KEY || 'AIzaSyDquv5JsikJVqweEAOtMxEt5oTEtI4IMmc';
const genAI = new GoogleGenerativeAI(API_KEY);
const model = genAI.getGenerativeModel({ 
  model: "gemini-2.0-flash-exp",
  generationConfig: {
    temperature: 0.7,
    topP: 0.8,
    topK: 40,
    maxOutputTokens: 8192,
  }
});

// „Éü„Éâ„É´„Ç¶„Çß„Ç¢Ë®≠ÂÆö
app.use(cors({
  origin: isDevelopment ? ['http://localhost:3000', 'http://localhost:3001', 'http://localhost'] : process.env.FRONTEND_URL,
  credentials: true
}));

app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// „É≠„Ç∞„Éü„Éâ„É´„Ç¶„Çß„Ç¢ÔºàÈñãÁô∫Áí∞Â¢É„ÅÆ„ÅøÔºâ
if (isDevelopment) {
  app.use((req, res, next) => {
    console.log(`[Gemini Server] [${new Date().toISOString()}] ${req.method} ${req.path}`);
    next();
  });
}

// „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà
app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    service: 'gemini-api',
    environment: process.env.NODE_ENV || 'development',
    port: PORT,
    timestamp: new Date().toISOString()
  });
});

// „É´„Éº„Éà„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà
app.get('/', (req, res) => {
  res.json({ 
    message: 'Gemini API Server',
    status: 'running',
    endpoints: [
      'GET /health',
      'POST /api/generate-code',
      'POST /api/improve-code',
      'POST /api/explain-code'
    ]
  });
});

// „Éó„É≠„É≥„Éó„Éà„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÅÆÁîüÊàê
const generateSystemPrompt = (request) => {
  const { framework, language, styling, complexity } = request;
  
  return `„ÅÇ„Å™„Åü„ÅØÂÑ™ÁßÄ„Å™„Éï„É≠„É≥„Éà„Ç®„É≥„ÉâÈñãÁô∫ËÄÖ„Åß„Åô„ÄÇ‰ª•‰∏ã„ÅÆË¶Å‰ª∂„Å´Âü∫„Å•„ÅÑ„Å¶„Ç≥„Éº„Éâ„ÇíÁîüÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö

**ÊäÄË°ìË¶Å‰ª∂:**
- „Éï„É¨„Éº„É†„ÉØ„Éº„ÇØ: ${framework}
- Ë®ÄË™û: ${language}
- „Çπ„Çø„Ç§„É™„É≥„Ç∞: ${styling}
- Ë§áÈõë„Åï: ${complexity}

**Âá∫ÂäõÂΩ¢Âºè:**
‰ª•‰∏ã„ÅÆJSONÂΩ¢Âºè„ÅßÂøúÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö

\`\`\`json
{
  "files": {
    "„Éï„Ç°„Ç§„É´Âêç": "„Éï„Ç°„Ç§„É´ÂÜÖÂÆπ"
  },
  "dependencies": ["‰æùÂ≠òÈñ¢‰øÇ„ÅÆ„É™„Çπ„Éà"],
  "description": "„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆË™¨Êòé",
  "instructions": "‰ΩøÁî®ÊñπÊ≥ï„ÇÑÊ≥®ÊÑè‰∫ãÈ†Ö"
}
\`\`\`

**„Ç≥„Éº„ÉâÁîüÊàê„É´„Éº„É´:**
1. ÂÆüÈöõ„Å´Âãï‰Ωú„Åô„ÇãÂÆåÂÖ®„Å™„Ç≥„Éº„Éâ„ÇíÁîüÊàê„Åô„Çã
2. ${framework}„ÅÆÊúÄÊñ∞„ÅÆ„Éô„Çπ„Éà„Éó„É©„ÇØ„ÉÜ„Ç£„Çπ„Å´Âæì„ÅÜ
3. ${styling}„Çí‰ΩøÁî®„Åó„Å¶„É¢„ÉÄ„É≥„ÅßÁæé„Åó„ÅÑUI„Çí‰ΩúÊàê„Åô„Çã
4. „É¨„Çπ„Éù„É≥„Ç∑„Éñ„Éá„Ç∂„Ç§„É≥„ÇíËÄÉÊÖÆ„Åô„Çã
5. „Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£„ÇíËÄÉÊÖÆ„Åô„Çã
6. „Ç≥„É°„É≥„Éà„ÇíÈÅ©Âàá„Å´Ë®òËø∞„Åô„Çã
7. „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„ÇíÂê´„ÇÅ„Çã
8. ${complexity}„É¨„Éô„É´„Å´ÈÅ©„Åó„ÅüÊ©üËÉΩ„ÇíÂÆüË£Ö„Åô„Çã

**„Éï„Ç°„Ç§„É´ÊßãÊàê:**
- „É°„Ç§„É≥„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Éï„Ç°„Ç§„É´
- „Çπ„Çø„Ç§„É´„Éï„Ç°„Ç§„É´ÔºàÂøÖË¶Å„Å´Âøú„Åò„Å¶Ôºâ
- Ë®≠ÂÆö„Éï„Ç°„Ç§„É´ÔºàÂøÖË¶Å„Å´Âøú„Åò„Å¶Ôºâ
- README.mdÔºà‰ΩøÁî®ÊñπÊ≥ï„ÇíË®òËºâÔºâ

„É¶„Éº„Ç∂„Éº„ÅÆ„É™„ÇØ„Ç®„Çπ„Éà: `;
};

// „Ç≥„Éº„ÉâÁîüÊàê„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà
app.post('/api/generate-code', async (req, res) => {
  try {
    const request = req.body;
    
    if (!request.prompt) {
      return res.status(400).json({ error: '„Éó„É≠„É≥„Éó„Éà„ÅåÂøÖË¶Å„Åß„Åô' });
    }

    console.log('[Gemini] „Ç≥„Éº„ÉâÁîüÊàê„É™„ÇØ„Ç®„Çπ„ÉàÂèó‰ø°:', request.prompt.substring(0, 100) + '...');

    const systemPrompt = generateSystemPrompt(request);
    const fullPrompt = systemPrompt + request.prompt;

    const result = await model.generateContent(fullPrompt);
    const response = await result.response;
    const text = response.text();

    // JSON„É¨„Çπ„Éù„É≥„Çπ„ÇíÊäΩÂá∫
    const jsonMatch = text.match(/```json\s*([\s\S]*?)\s*```/);
    if (!jsonMatch) {
      throw new Error('ÊúâÂäπ„Å™JSON„É¨„Çπ„Éù„É≥„Çπ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü');
    }

    const parsedResponse = JSON.parse(jsonMatch[1]);
    
    // „É¨„Çπ„Éù„É≥„Çπ„ÅÆÊ§úË®º
    if (!parsedResponse.files || typeof parsedResponse.files !== 'object') {
      throw new Error('„Éï„Ç°„Ç§„É´ÊÉÖÂ†±„Åå‰∏çÊ≠£„Åß„Åô');
    }

    const result_data = {
      files: parsedResponse.files,
      dependencies: parsedResponse.dependencies || [],
      description: parsedResponse.description || 'Generated Code Project',
      instructions: parsedResponse.instructions || ''
    };

    console.log('[Gemini] „Ç≥„Éº„ÉâÁîüÊàêÂÆå‰∫Ü');
    res.json(result_data);

  } catch (error) {
    console.error('[Gemini] „Ç≥„Éº„ÉâÁîüÊàê„Ç®„É©„Éº:', error);
    res.status(500).json({ 
      error: error instanceof Error ? error.message : '„Ç≥„Éº„ÉâÁîüÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü' 
    });
  }
});

// „Ç≥„Éº„ÉâÊîπÂñÑ„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà
app.post('/api/improve-code', async (req, res) => {
  try {
    const { originalCode, improvementRequest, framework } = req.body;
    
    if (!originalCode || !improvementRequest) {
      return res.status(400).json({ error: 'ÂÖÉ„ÅÆ„Ç≥„Éº„Éâ„Å®ÊîπÂñÑË¶ÅÊ±Ç„ÅåÂøÖË¶Å„Åß„Åô' });
    }

    console.log('[Gemini] „Ç≥„Éº„ÉâÊîπÂñÑ„É™„ÇØ„Ç®„Çπ„ÉàÂèó‰ø°');

    const prompt = `‰ª•‰∏ã„ÅÆ„Ç≥„Éº„Éâ„ÇíÊîπÂñÑ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö

**ÊîπÂñÑË¶ÅÊ±Ç:** ${improvementRequest}
**„Éï„É¨„Éº„É†„ÉØ„Éº„ÇØ:** ${framework}

**ÂÖÉ„ÅÆ„Ç≥„Éº„Éâ:**
${originalCode}

**Âá∫ÂäõÂΩ¢Âºè:**
\`\`\`json
{
  "files": {
    "„Éï„Ç°„Ç§„É´Âêç": "ÊîπÂñÑ„Åï„Çå„Åü„Éï„Ç°„Ç§„É´ÂÜÖÂÆπ"
  },
  "dependencies": ["ÂøÖË¶Å„Å™‰æùÂ≠òÈñ¢‰øÇ"],
  "description": "ÊîπÂñÑÂÜÖÂÆπ„ÅÆË™¨Êòé",
  "instructions": "Â§âÊõ¥ÁÇπ„ÇÑ‰ΩøÁî®ÊñπÊ≥ï"
}
\`\`\`

ÊîπÂñÑ„Åï„Çå„Åü„Ç≥„Éº„Éâ„ÇíÁîüÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`;

    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();

    const jsonMatch = text.match(/```json\s*([\s\S]*?)\s*```/);
    if (!jsonMatch) {
      throw new Error('ÊúâÂäπ„Å™JSON„É¨„Çπ„Éù„É≥„Çπ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü');
    }

    const parsedResponse = JSON.parse(jsonMatch[1]);
    console.log('[Gemini] „Ç≥„Éº„ÉâÊîπÂñÑÂÆå‰∫Ü');
    res.json(parsedResponse);

  } catch (error) {
    console.error('[Gemini] „Ç≥„Éº„ÉâÊîπÂñÑ„Ç®„É©„Éº:', error);
    res.status(500).json({ 
      error: error instanceof Error ? error.message : '„Ç≥„Éº„ÉâÊîπÂñÑ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü' 
    });
  }
});

// „Ç≥„Éº„ÉâË™¨Êòé„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà
app.post('/api/explain-code', async (req, res) => {
  try {
    const { code } = req.body;
    
    if (!code) {
      return res.status(400).json({ error: '„Ç≥„Éº„Éâ„ÅåÂøÖË¶Å„Åß„Åô' });
    }

    console.log('[Gemini] „Ç≥„Éº„ÉâË™¨Êòé„É™„ÇØ„Ç®„Çπ„ÉàÂèó‰ø°');

    const prompt = `‰ª•‰∏ã„ÅÆ„Ç≥„Éº„Éâ„Å´„Å§„ÅÑ„Å¶„ÄÅ„Çè„Åã„Çä„ÇÑ„Åô„ÅèË™¨Êòé„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö

${code}

**Ë™¨Êòé„Å´Âê´„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑ:**
1. „Ç≥„Éº„Éâ„ÅÆÁõÆÁöÑ„Å®Ê©üËÉΩ
2. ‰∏ªË¶Å„Å™ÊäÄË°ì„ÇÑ„É©„Ç§„Éñ„É©„É™
3. „Ç≥„Éº„Éâ„ÅÆÊßãÈÄ†
4. ÈáçË¶Å„Å™ÈÉ®ÂàÜ„ÅÆËß£Ë™¨
5. ‰ΩøÁî®ÊñπÊ≥ï

Êó•Êú¨Ë™û„ÅßË©≥„Åó„ÅèË™¨Êòé„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`;

    const result = await model.generateContent(prompt);
    const response = await result.response;
    const explanation = response.text();

    console.log('[Gemini] „Ç≥„Éº„ÉâË™¨ÊòéÂÆå‰∫Ü');
    res.json({ explanation });

  } catch (error) {
    console.error('[Gemini] „Ç≥„Éº„ÉâË™¨Êòé„Ç®„É©„Éº:', error);
    res.status(500).json({ 
      error: error instanceof Error ? error.message : '„Ç≥„Éº„ÉâË™¨Êòé„Å´Â§±Êïó„Åó„Åæ„Åó„Åü' 
    });
  }
});

// 404„Éè„É≥„Éâ„É©„Éº
app.use('*', (req, res) => {
  res.status(404).json({ 
    error: 'Not Found',
    message: `Route ${req.originalUrl} not found on Gemini server`,
    availableRoutes: [
      'GET /',
      'GET /health',
      'POST /api/generate-code',
      'POST /api/improve-code',
      'POST /api/explain-code'
    ]
  });
});

// „Ç®„É©„Éº„Éè„É≥„Éâ„É©„Éº
app.use((error, req, res, next) => {
  console.error('[Gemini] Server Error:', error);
  res.status(500).json({ 
    error: 'Internal Server Error',
    message: isDevelopment ? error.message : 'Something went wrong'
  });
});

// „Çµ„Éº„Éê„ÉºËµ∑Âãï
app.listen(PORT, () => {
  console.log(`ü§ñ Gemini API server running on port ${PORT}`);
  console.log(`üìç Environment: ${process.env.NODE_ENV || 'development'}`);
  console.log(`üåê CORS enabled for: ${isDevelopment ? 'http://localhost:3000, http://localhost:3001, http://localhost' : process.env.FRONTEND_URL}`);
  
  if (isDevelopment) {
    console.log(`üîó Health check: http://localhost:${PORT}/health`);
    console.log(`ü§ñ Gemini API: http://localhost:${PORT}/api/`);
    console.log(`üìã Available endpoints:`);
    console.log(`   GET  http://localhost:${PORT}/`);
    console.log(`   GET  http://localhost:${PORT}/health`);
    console.log(`   POST http://localhost:${PORT}/api/generate-code`);
    console.log(`   POST http://localhost:${PORT}/api/improve-code`);
    console.log(`   POST http://localhost:${PORT}/api/explain-code`);
  }
});

module.exports = app; 