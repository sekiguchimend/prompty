import { NextApiRequest, NextApiResponse } from 'next';
import { supabase } from '../../lib/supabaseClient';
import { DEFAULT_AVATAR_URL } from '../../components/common/Avatar';
import { searchQuerySchema, sanitizeSearchQuery } from '../../lib/security/input-validation';
import { SecureDB } from '../../lib/security/secure-db';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  // GET„É™„ÇØ„Ç®„Çπ„Éà„ÅÆ„ÅøÂèó„Åë‰ªò„Åë„Çã
  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'Method not allowed' });
  }
  
  try {
    // üîí „Çª„Ç≠„É•„Ç¢„Å™ÂÖ•ÂäõÊ§úË®º
    const validatedQuery = searchQuerySchema.parse({
      query: req.query.q,
      category: req.query.category,
      page: req.query.page ? parseInt(req.query.page as string) : 1,
      limit: req.query.limit ? parseInt(req.query.limit as string) : 20
    });

    const secureDB = new SecureDB(supabase);
    
    // üîí SQL„Ç§„É≥„Ç∏„Çß„ÇØ„Ç∑„Éß„É≥ÂØæÁ≠ñÊ∏à„Åø„ÅÆÊ§úÁ¥¢
    const { data: searchResults, error: searchError } = await secureDB.searchPrompts(
      validatedQuery.query,
      {
        category: validatedQuery.category,
        limit: validatedQuery.limit,
        offset: (validatedQuery.page - 1) * validatedQuery.limit
      }
    );
      
    if (searchError) {
      console.error('Ê§úÁ¥¢„Ç®„É©„Éº:', searchError);
      throw searchError;
    }
    
    // üîí „Éá„Éº„ÇøÂ§âÊèõÔºàXSSÂØæÁ≠ñËæº„ÅøÔºâ
    const formattedResults = transformPromptsData(searchResults || []);
    
    return res.status(200).json({ 
      results: formattedResults,
      pagination: {
        page: validatedQuery.page,
        limit: validatedQuery.limit,
        total: searchResults?.length || 0
      }
    });
    
  } catch (error) {
    console.error('Ê§úÁ¥¢‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü:', error);
    
    // üîí „Çª„Ç≠„É•„Ç¢„Å™„Ç®„É©„Éº„É¨„Çπ„Éù„É≥„ÇπÔºàÂÜÖÈÉ®ÊÉÖÂ†±„ÇíÈö†„ÅôÔºâ
    if (error instanceof Error && error.message.includes('validation')) {
      return res.status(400).json({ 
        error: 'ÁÑ°Âäπ„Å™Ê§úÁ¥¢„Éë„É©„É°„Éº„Çø„Åß„Åô',
        results: []
      });
    }
    
    return res.status(500).json({ 
      error: 'Ê§úÁ¥¢Âá¶ÁêÜ„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü',
      results: []
    });
  }
}

// „Éá„Éº„ÇøÂ§âÊèõÁî®„Éò„É´„Éë„ÉºÈñ¢Êï∞
const transformPromptsData = (promptsData: any[]) => {
  return promptsData.map(prompt => {
    const profileData = prompt.profiles 
      ? prompt.profiles
      : { display_name: '‰∏çÊòé„Å™„É¶„Éº„Ç∂„Éº', avatar_url: DEFAULT_AVATAR_URL };
    
    return {
      id: prompt.id,
      title: prompt.title || 'ÁÑ°È°å',
      thumbnailUrl: prompt.thumbnail_url || '/images/default-thumbnail.svg',
      postedAt: new Date(prompt.created_at).toLocaleDateString('ja-JP'),
      likeCount: prompt.like_count || 0,
      user: {
        userId: prompt.author_id || '',
        name: profileData.display_name || profileData.username || '‰∏çÊòé„Å™„É¶„Éº„Ç∂„Éº',
        avatarUrl: profileData.avatar_url || DEFAULT_AVATAR_URL,
      }
    };
  });
}; 