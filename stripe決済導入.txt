────────────────────────────────────────────────────────────
Express + Supabase で実装する “Direct Charges” モデル CtoC 決済フロー手順
────────────────────────────────────────────────────────────

【前提条件】
  • Supabase プロジェクト作成済み  
  • Stripe Connect（Express アカウント）有効化済み  
  • Next.js(TypeScript) プロジェクト初期化済み  
  • Node.js ≥16、npm または yarn  
  • HTTPS が有効な環境（ローカルは ngrok 等）  

【環境変数 (.env.local)】
  STRIPE_SECRET_KEY=sk_test_xxx  
  NEXT_PUBLIC_URL=https://your.domain  
  SUPABASE_URL=https://xyz.supabase.co  
  SUPABASE_SERVICE_ROLE_KEY=eyJhbGci…  
  SUPABASE_ANON_KEY=pk.eyJhbGci…  
  STRIPE_WEBHOOK_SECRET=whsec_xxx  

────────────────────────────────────────────────────────────
1. Supabase Database Extensions（Wrappers）は不要  
   — Direct Charges では Stripe API 呼び出しのみで完結できるため、
     Wrappers extension や FDW の設定はスキップして構いません。

2. Supabase テーブル定義
────────────────────────────────────────────────────────────
2.1 profiles テーブルに stripe_account_id を追加  
    $ supabase db query <<SQL
      ALTER TABLE public.profiles
        ADD COLUMN IF NOT EXISTS stripe_account_id TEXT;
    SQL

2.2 支払い履歴テーブル payments 作成  
    $ supabase db query <<SQL
      CREATE TABLE IF NOT EXISTS public.payments (
        id           UUID    DEFAULT gen_random_uuid() PRIMARY KEY,
        user_id      UUID    REFERENCES public.profiles(id),
        amount       BIGINT  NOT NULL,
        currency     TEXT    NOT NULL,
        intent_id    TEXT    NOT NULL,
        status       TEXT    NOT NULL,
        created_at   TIMESTAMPTZ DEFAULT NOW()
      );
    SQL

────────────────────────────────────────────────────────────
3. Next.js API 実装 (TypeScript)
────────────────────────────────────────────────────────────
3.1 ライブラリインストール  
    $ npm install stripe @supabase/supabase-js raw-body axios  
    $ npm install -D @types/raw-body  

3.2 Stripe & Supabase クライアント初期化  
    // lib/stripe.ts
    import Stripe from 'stripe';
    export const stripe = new Stripe(
      process.env.STRIPE_SECRET_KEY!,
      { apiVersion: '2024-06-20' }
    );

    // lib/supabase.ts
    import { createClient } from '@supabase/supabase-js';
    export const supabase = createClient(
      process.env.SUPABASE_URL!,
      process.env.SUPABASE_SERVICE_ROLE_KEY!
    );

3.3 Express アカウント作成 & profiles 更新  
    // pages/api/create-express-account.ts
    import type { NextApiRequest, NextApiResponse } from 'next';
    import { stripe } from '../../lib/stripe';
    import { supabase } from '../../lib/supabase';

    export default async function handler(req: NextApiRequest, res: NextApiResponse) {
      const { userId } = req.body;
      if (!userId) return res.status(400).json({ error: 'userId is required' });

      // Express アカウント作成
      const account = await stripe.accounts.create({
        type: 'express',
        country: 'JP',
        capabilities: {
          card_payments: { requested: true },
          transfers:      { requested: true },
        },
      });

      // profiles テーブルに保存
      const { error } = await supabase
        .from('profiles')
        .update({ stripe_account_id: account.id })
        .eq('id', userId);

      if (error) return res.status(500).json({ error: error.message });

      res.status(200).json({ accountId: account.id });
    }

3.4 Onboarding リンク発行  
    // pages/api/create-account-link.ts
    import type { NextApiRequest, NextApiResponse } from 'next';
    import { stripe } from '../../lib/stripe';

    export default async function handler(req: NextApiRequest, res: NextApiResponse) {
      const { accountId } = req.body;
      if (!accountId) return res.status(400).json({ error: 'accountId is required' });

      const link = await stripe.accountLinks.create({
        account:     accountId,
        type:        'account_onboarding',
        refresh_url: `${process.env.NEXT_PUBLIC_URL}/onboard?refresh=true`,
        return_url:  `${process.env.NEXT_PUBLIC_URL}/onboard?completed=true`,
      });

      res.status(200).json({ url: link.url });
    }

3.5 Direct Charges モデル：PaymentIntent 作成  
    // pages/api/create-payment-intent.ts
    import type { NextApiRequest, NextApiResponse } from 'next';
    import { stripe } from '../../lib/stripe';
    import { supabase } from '../../lib/supabase';

    export default async function handler(req: NextApiRequest, res: NextApiResponse) {
      const { userId, amount, currency } = req.body;
      if (!userId || !amount || !currency) {
        return res.status(400).json({ error: 'missing parameters' });
      }

      // destination: profiles から取得
      const { data, error: selErr } = await supabase
        .from('profiles')
        .select('stripe_account_id')
        .eq('id', userId)
        .single();
      if (selErr || !data?.stripe_account_id) {
        return res.status(404).json({ error: 'account not found' });
      }

      // Direct Charges: on_behalf_of + application_fee_amount
      const intent = await stripe.paymentIntents.create({
        amount,
        currency,
        payment_method_types: ['card'],
        on_behalf_of: data.stripe_account_id,
        application_fee_amount: Math.floor(amount * 0.10),  // 例: 10% fee
        transfer_data: undefined,
      });

      // ログ保存
      await supabase.from('payments').insert({
        user_id:   userId,
        amount,
        currency,
        intent_id: intent.id,
        status:    intent.status,
      });

      res.status(200).json({ clientSecret: intent.client_secret });
    }

────────────────────────────────────────────────────────────
4. Webhook エンドポイント実装
────────────────────────────────────────────────────────────
4.1 Next.js API 設定  
    // pages/api/webhook.ts
    import type { NextApiRequest, NextApiResponse } from 'next';
    import Stripe from 'stripe';
    import getRawBody from 'raw-body';
    import { supabase } from '../../lib/supabase';
    import { stripe } from '../../lib/stripe';

    export const config = { api: { bodyParser: false } };

    export default async function handler(req: NextApiRequest, res: NextApiResponse) {
      const buf = await getRawBody(req);
      const sig = req.headers['stripe-signature']!;
      let event: Stripe.Event;

      try {
        event = stripe.webhooks.constructEvent(buf, sig, process.env.STRIPE_WEBHOOK_SECRET!);
      } catch (err: any) {
        return res.status(400).send(`Webhook Error: ${err.message}`);
      }

      switch (event.type) {
        case 'payment_intent.succeeded':
          {
            const pi = event.data.object as Stripe.PaymentIntent;
            await supabase
              .from('payments')
              .update({ status: 'succeeded' })
              .eq('intent_id', pi.id);
          }
          break;
        // 必要に応じて 他 イベント追加
      }

      res.status(200).json({ received: true });
    }

────────────────────────────────────────────────────────────
5. フロントエンド埋め込み & UX フロー
────────────────────────────────────────────────────────────
5.1 必要パッケージ  
    $ npm install axios @mui/material @emotion/react @emotion/styled

5.2 OnboardModal コンポーネント  
    // components/OnboardModal.tsx
    import { useState, useEffect } from 'react';
    import Modal from '@mui/material/Modal';
    import Box from '@mui/material/Box';
    import axios from 'axios';
    import { useRouter } from 'next/router';

    type Props = { userId: string; open: boolean; onClose: () => void; };
    export default function OnboardModal({ userId, open, onClose }: Props) {
      const [url, setUrl] = useState<string>();
      const router = useRouter();
      useEffect(() => {
        if (!open) return;
        (async () => {
          const { data: acct } = await axios.post('/api/create-express-account', { userId });
          const { data: link } = await axios.post('/api/create-account-link', { accountId: acct.accountId });
          setUrl(link.url);
        })();
      }, [open]);
      useEffect(() => {
        if (router.query.completed === 'true') onClose();
      }, [router.query]);
      return (
        <Modal open={open} onClose={onClose}>
          <Box sx={{ width:600, height:700, m:'auto', mt:5, bgcolor:'background.paper' }}>
            {url
              ? <iframe src={url} style={{ width:'100%', height:'100%', border:'none' }} />
              : <p>読み込み中…</p>
            }
          </Box>
        </Modal>
      );
    }

5.3 PaymentForm & Checkout  
    // components/CheckoutForm.tsx
    import { useState } from 'react';
    import { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';
    import axios from 'axios';

    export default function CheckoutForm({ userId, amount }) {
      const stripe = useStripe();
      const elements = useElements();
      const [loading, setLoading] = useState(false);

      const handleSubmit = async (e) => {
        e.preventDefault();
        setLoading(true);
        const { data } = await axios.post('/api/create-payment-intent', { userId, amount, currency:'jpy' });
        const { error } = await stripe!.confirmCardPayment(data.clientSecret, {
          payment_method: { card: elements!.getElement(CardElement)! }
        });
        setLoading(false);
        if (error) alert(error.message);
        else alert('支払い成功！');
      };

      return (
        <form onSubmit={handleSubmit}>
          <CardElement />
          <button disabled={!stripe || loading}>支払う</button>
        </form>
      );
    }

────────────────────────────────────────────────────────────
6. テスト & デプロイ
────────────────────────────────────────────────────────────
6.1 ローカルテスト  
    • ngrok で Webhook URL を登録  
    • アカウント作成～オンボーディング～決済～成功ログを一連で確認  

6.2 本番デプロイ  
    • .env を本番用キーに切替  
    • NEXT_PUBLIC_URL/Webhook URL を本番ドメインに変更  
    • Vercel もしくは Supabase Edge Functions へデプロイ  
    • Stripe ダッシュボードで本番用 Webhook 設定  

────────────────────────────────────────────────────────────
完了！この .txt の通りに実装すれば、Express アカウント＋Direct Charges モデルで
プラットフォームが資金を預からず、売り手アカウントに直接チャージする CtoC 決済が
Next.js(TypeScript)+Supabase 上で動作します。
────────────────────────────────────────────────────────────
